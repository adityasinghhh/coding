#include<algorithm>
#include<assert.h>
#include<bitset>
#include<climits>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<deque>
#include<iostream>
#include<map>
#include<memory.h>
#include<queue>
#include<set>
#include<sstream>
#include<stack>
#include<string>
#include<utility>
#include<vector>

using namespace std;

#define LL long long int

typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<double> VD;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<VLL> VVLL;
typedef vector<VD> VVD;
typedef vector<VS> VVS;
typedef pair<int,int> PI;
typedef vector<pair<int,int> > VPI;
typedef pair<double,double> PD;

#define SI ({int _x; scanf("%d",&_x); _x;})
#define SC ({char _x; scanf("%c",&_x); _x;})
#define SLL ({LL _x; scanf("%lld",&_x); _x;})
#define SLF ({double _x; scanf("%lf",&_x); _x;})
#define PI(x) printf("%d",x)
#define PC(x) printf("%c",x)
#define PLL(x) printf("%lld",x)
#define PLF(x) printf("%lf",x)
#define PS(x) printf("%s",x)
#define P32() printf(" ")
#define P10() printf("\n")
#define lc(i) (i<<1)
#define rc(i) ((i<<1)+1)
#define iscan(n) scanf("%d",&n)
#define cscan(n) scanf("%c",&n)
#define llscan(n) scanf("%lld",&n)
#define lfscan(n) scanf("%lf",&n)
#define sscan(n) scanf("%s",n)
#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORD(i,a,b) for(int i=b-1;i>=a;--i)
#define REP(i,b) for(int i=0;i<b;++i)
#define REPD(i,b) for(int i=b-1;i>=0;--i)
#define MP(a,b) make_pair(a,b)
#define PB(a) push_back(a)
#define FILL(a,b) memset(a,b,sizeof a)
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define ABS(a) ((a)<0?-(a):(a))
#define ALL(a) a.begin(),a.end()
#define SORT(a) sort(ALL(a))
#define TR(i,c) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 

VI V[55];
set<int> S[55];
set<set<int> > SCC;
int mark[55];

int sz = 10000001;
int hash[10000001];
set<LL> final;
int N;
void dfs(int n, LL mask)
{
	if(hash[mask%sz])
	{
		return;
	}

	hash[mask%sz] = 1;
	final.insert(mask);

	FOR(i,n+1,N)
	{
		if((mask&(1ll<<i)))
		{
			continue;
		}

		bool flag = true;
		LL x = mask, j = 0;
		while(x)
		{
			if(x&1 && S[j].find(i) == S[j].end())
			{
				flag = false;
				break;
			}
			++j;
			x /= 2;
		}

		if(flag)
		{
			dfs(i, mask | (1ll<<i));
		}
	}
}

class MagicMolecule {
public:
	int maxMagicPower(vector <int> P, vector <string> v) {

		FILL(hash, 0);
		final.clear();
		N = v.size();
		REP(i,N)
		{
			S[i].clear();
			REP(j,N)
			{
				if(v[i][j] == 'Y')
				{
					S[i].insert(j);
					S[j].insert(i);
				}
			}
		}

		REP(i,N)
		{
			LL mask = (1ll<<i);
			dfs(i, mask);
		}

		int maxi = -1;
		TR(i,final)
		{
			LL x = (*i);
			if(3*__builtin_popcount(x) < 2*N)
			{
				continue;
			}

			int val = 0, j = 0;
			while(x)
			{
				if(x&1)
				{
					val += P[j];
				}
				++j;
				x /= 2;
			}

			maxi = MAX(maxi, val);
		}

		return maxi;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MagicMolecule *obj;
	int answer;
	obj = new MagicMolecule();
	clock_t startTime = clock();
	answer = obj->maxMagicPower(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NYY","YNN","YNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NNYY","NNYY","YYNN","YYNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {86,15,100,93,53,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NYYYYN","YNNNNY","YNNYYN","YNYNYN","YNYYNY","NYNNYN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 332;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {9878776, 8805589, 2187704, 5750018, 1134968, 117486, 7791266, 4160662, 7166374, 5417698, 539821, 5388027, 8304415, 8584227, 2829841, 4148409, 9750158, 9020935, 8603765, 9464761, 9137761, 3192832, 8730272, 1481219, 5506194, 9448803, 2365254, 7858131, 7700516, 3372304, 5327683, 8087474, 4615113, 5482411, 5055544, 3245708, 6501759, 7063805, 2274672, 9723792, 7321172, 5990215, 7875229, 6883513, 1577143, 3681480, 8556509, 3158305, 3049184, 565049};
	//int t0[] = {3969,9430,7242,8549,8190,8368,3704,9740,1691};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	//string t1[] = {"NYYYYYYYY","YNYYYYYYY","YYNYYYYYY","YYYNYYYYY","YYYYNYYYY","YYYYYNYYY","YYYYYYNNY","YYYYYYNNY","YYYYYYYYN"};
	string t1[] = {"YYYNNNNNYYNYNNYYYYNNYYYYNYYNNYYNNYNYYYYYYNYNYYNYNY", "YYNNNNNNNYNNYNYYYNNYNYYYYNYNYYYNYYYYYNYNNYYNNNNYNN", "YYYNYNYYNNYYYYYNNYNNNYNNYNYNNNNYNNYYYNYYNYNYNNNYYN", "NNYYNYYNYNYNYNNNNNNNNNYNNNNYYYYYNYYYNYYNNNYYYNNYYN", "NYNNNYYYYYYYYNNYNYYYYNYNYYNYNYNNNNYYYYYYNYYNYNNNYY", "NNNYYYYYYNYYYNYYNNYYYYNNNYNNNNNNNYNYNYNYYYYYYYYNYN", "YNNNNNNYNNYYYNNNYYNNYYYYNNYYYNYYYNNNNNYYNNYNYNNNYY", "YNYNNNYYYYYNYYYYYYYYYYNYNYNNNNYYYNNYNYNNYNYNNNNYNN", "YNYYNYYNNYNYYNNYNYNNNNNYNNNYNYYYYNNNYYNYNYNYNNNYYY", "NNNYYYNNYNYYNNYYYYNYYYNNYNYYNYYNYYYYNNNNNNNNNYNYNY", "YNYYNYYYNNNYYNYYNYYYYYNNNYNYYYYNNNYYNNYYYNYYYYNNYN", "YYNNNNYNNYNNYNNNNYYYNNYNNYNYNNNNYYNYYNNNYYYNYNNYYY", "YYYYYNYYYYNYNYNYNNYNNYYNYNYYYYNNYNNYYYYNYYYYYNNYNY", "YYYYNYYNNNYNNYNYYNYYYNYYNNNYYNYYYNNYYNYNNYYNYYNNYN", "NNNYYNYNYYYNNYNNYYYYYYNNYYYNNYYYNYNYNYYNYNNYNNNNNY", "YYYNYNYYYNNNNYYYNNYNYYNNYNYNNNNNNNNYYYYYYYYNNYYYYN", "YYYNNYNNYYYNYYNNYNNNNNNNNNYYNYYNNYNYYYYYYYNNYNNNYN", "NNNNYYNNNYNYYYNYNNNNYYNNYNYNYNNYYYYNYYYNYYYNYYNNYY", "NNNYNYNYNNNYYNYNYYNNNNNYNYNYNYNNNNNNYNYNYYNYNNYNNY", "YYYNYYYYNNNNYNNYYNYNYYNYNYYYYYNNYYNNNNYYYNNYNYNYYN", "YYNNNYNNNNNYYYNNYYYNYNNYNNNNYYNYNNYNNNNNNNNYYYYYNY", "YNNNNYNNYNYYYNNYYYNYYNYNNNNNNYYNNYYNYNNNYNNYNNYNYY", "YNNNYYYNYNNNNNYNYNYYNYYYNYNYNYYYYYYNNNNYYNNYNNNNYN", "NNYNNYNYNYNNNNNNYNNYNYYNYYYNYYYYYNNNNNNYYNYYNNYYNY", "YNNYNYYYYNNYNYNYYNYNYYYYYYNYYNYYNNYNNYYNYNYNNNNYNY", "NYYYYNNNYYNNYNNNYYYNNNYNYNNYYNNNYYNYNYNNYYNNNYYYYN", "YNYYYYNNNYYYNNNNNNYYYYYYYYNNYYNYNYNYNYNYNNYYNNYNNY", "YYNNNNYNYNYYNNNNNYYNNYYNNYNYYNYYYYYNNNNYNYYNNYNNYN", "NNNYNYYNNNYYYNYNYNNNNYYYNYNYYYNYNYYNYYNYYYNNNYYNNY", "YYYYNYNYNNYNNYNNYYNYNYNNNNYNYNNNYYYYYNNYYYYNYNYYNN", "NYYNYNNYNYNNNYYYNYNNYYNNYYNYNYYYYNNYYNNNYYNNYYYNNY", "NYNYNYYNNNNYYNYNYNYNNYYYNYNYYNNYNNNYYYYNYYNYYYNNYN", "YYYYNNNNNYYYNNNYNYYNNYNYYYNYYYNYYNYNNYYYNYYNNNYYNY", "NNYNYNNNNNNNYYYYNNNYYYNNYNYYYYNYYYYYYYYNNNYYNNYNNY", "YYYYYNYNNNNYYYYYYYNNNNYYYNYYYNYNNNYNNNYYNNYYYYYNNN", "YYNYYYYYNYNYYYYNNNYNNYYYYYYYNNYNNYYNYNNNYYYNNNNYNN", "NNYNNNYYNNNNNYNNNYYNYYYYYYYYNNYNYNNNNYYNYNNNNNNYYN", "YYYNYNNYYNNNNNYYYYYYNNYYNYNNNNYYYYYNNNYYYYNNNNNYNN", "YNYNNNYYYNNNYNYNYNNNYNNNYYNNYYYNNNNYNNYNYYYNYYYYYY", "NNYYYYYYYYNNYYNYNYYNNNYNNYYNYNYYNYNNNYYYYYNNNYYYNN", "YYYNYNNNNNNYNNYYNNYYNNYNYYYYYNYYNNYNYNYNYNYYYNNYNN", "NYYNNNYYYNNYYNNYYYYYNYYYNNNYNNYYYYNNNYNYNYYYNYYYNN", "NNYYYYYNNYNNYNYYYNYYNYNYYNNYNNYYNNYYYNYNYNNNNNYNNY", "NYYYNYNNNYNNYNYNYNYYNNYYYYNYNNNYYNYNYNNYYYNNNNNYYY", "NYNNNYYYYNNNYYYNNNYYNYYYNNYNYYNNNNYNNNYNNYNNNNYNNN", "YNNYNNNNNYYYNYNNNNNYYNYNYNYNYYYYYYNYNYYYYYYNNYNYYY", "NYNNYNYYNYYNNYYYYYYNYNNNNNNYYYYYNYNNYYYYYNYYYNYNYY", "YNYNNNNNYYNYNNNYYNNYYNYNYYYNNYNYYNYYYYNNYYYNNYNNNY", "YNNNNYYNNYNYNYYYNNYNNYNNNYYNNYYNNNYYYYNYNYNNYNNYYY", "NNNYYYYYYNNYYNNNNYYNYYNNYYYYYYYYYYYNYNYYYNNYYNNYNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 57179;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
