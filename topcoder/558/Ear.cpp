#include<algorithm>
#include<assert.h>
#include<bitset>
#include<climits>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<deque>
#include<iostream>
#include<map>
#include<memory.h>
#include<queue>
#include<set>
#include<sstream>
#include<stack>
#include<string>
#include<utility>
#include<vector>

using namespace std;

#define LL long long int

typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<double> VD;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<VLL> VVLL;
typedef vector<VD> VVD;
typedef vector<VS> VVS;
typedef pair<int,int> PI;
typedef vector<pair<int,int> > VPI;
typedef pair<double,double> PD;

#define SI ({int _x; scanf("%d",&_x); _x;})
#define SC ({char _x; scanf("%c",&_x); _x;})
#define SLL ({LL _x; scanf("%lld",&_x); _x;})
#define SLF ({double _x; scanf("%lf",&_x); _x;})
#define PI(x) printf("%d",x)
#define PC(x) printf("%c",x)
#define PLL(x) printf("%lld",x)
#define PLF(x) printf("%lf",x)
#define PS(x) printf("%s",x)
#define P32() printf(" ")
#define P10() printf("\n")
#define lc(i) (i<<1)
#define rc(i) ((i<<1)+1)
#define iscan(n) scanf("%d",&n)
#define cscan(n) scanf("%c",&n)
#define llscan(n) scanf("%lld",&n)
#define lfscan(n) scanf("%lf",&n)
#define sscan(n) scanf("%s",n)
#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORD(i,a,b) for(int i=b-1;i>=a;--i)
#define REP(i,b) for(int i=0;i<b;++i)
#define REPD(i,b) for(int i=b-1;i>=0;--i)
#define MP(a,b) make_pair(a,b)
#define PB(a) push_back(a)
#define FILL(a,b) memset(a,b,sizeof a)
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define ABS(a) ((a)<0?-(a):(a))
#define ALL(a) a.begin(),a.end()
#define SORT(a) sort(ALL(a))
#define TR(i,c) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

class Ear {
	public:
		string input;
		int rx[311], n;
		int x[311], y[311], m;
		LL ans;

		int getint()
		{
			int t = 0;
			while(input.size() && input[0] == ' ') input.erase(0, 1);
			while(input.size() && input[0] != ' ')
				t = t*10 + input[0] - '0', input.erase(0, 1);
			return t;
		}

		bool check(int x1, int y1, int x2, int y2)
		{
			return x1*y2 < x2*y1;
		}

		void work(int u, int v)
		{
			int a = 0, b = 0;
			LL aa = 0, bb = 0;
			for(int i=1; i<= n && rx[i] < x[v]; ++i) ++a;
			for(int i=n; i>=1 && rx[i] > x[v]; --i) ++b;
			for(int i=1; i<=n && rx[i] < x[u]; ++i)
				if(check(x[u] - rx[i], y[u], x[v]-rx[i], y[v]))
					--a, aa+=(LL)a;
				else break;
			for(int i=n; i>=1 && rx[i]>x[u]; --i)
				if(check(x[v]-rx[i], y[v], x[u]-rx[i], y[u]))
					--b, bb+=(LL)b;
			ans += aa*bb;
		}

		long long getCount(vector <string> redX, vector <string> blueX, vector <string> blueY) {
			input = "";
			int i,j,k,u,v;
			ans = 0;
			n = m = 0;
			REP(i,redX.size()) input+=redX[i];
			while(input.size()) rx[++n] = getint();
			REP(i,blueX.size()) input+=blueX[i];
			while(input.size()) x[++m] = getint();
			m = 0;
			REP(i,blueY.size()) input += blueY[i];
			while(input.size()) y[++m] = getint();
			sort(rx+1, rx+n+1);
			FOR(i,1,m-1)
				FOR(j,i+1,m)
				{
					if(y[i] > y[j]) u = i, v = j;
					else u=j,v=i;
					work(u,v);
				}
			return ans;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Ear *obj;
	long long answer;
	obj = new Ear();
	clock_t startTime = clock();
	answer = obj->getCount(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	long long p3;

	{
		// ----- test 0 -----
		string t0[] = {"3 2 8 7"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"5 4"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"2 4"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 1ll;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"3 2 8 7"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"2 8"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"3 4"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 0ll;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"1 2 6 9"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"3 6 8 5"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"1 5 4 3"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 4ll;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = {"10000"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"10000 9999"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"10000 9999"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 0ll;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = {"100 2","00"," 39","9"," 800 900 9","99"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"15","0 250 ","349"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"2 3 1"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 12ll;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		string t0[] = {"1"," ","2"," ","3"," ","4 5 6"," 7 8 9"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"4"," ","5"," ","6"," 7 ","8"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"1"," 2 ","3 4"," 5"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 204ll;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

