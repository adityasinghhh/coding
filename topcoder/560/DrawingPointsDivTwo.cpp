#include<algorithm>
#include<assert.h>
#include<bitset>
#include<climits>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<deque>
#include<iostream>
#include<map>
#include<memory.h>
#include<queue>
#include<set>
#include<sstream>
#include<stack>
#include<string>
#include<utility>
#include<vector>

using namespace std;

#define LL long long int

typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<double> VD;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<VLL> VVLL;
typedef vector<VD> VVD;
typedef vector<VS> VVS;
typedef pair<int,int> PI;
typedef vector<pair<int,int> > VPI;
typedef pair<double,double> PD;

#define SI ({int _x; scanf("%d",&_x); _x;})
#define SC ({char _x; scanf("%c",&_x); _x;})
#define SLL ({LL _x; scanf("%lld",&_x); _x;})
#define SLF ({double _x; scanf("%lf",&_x); _x;})
#define PI(x) printf("%d",x)
#define PC(x) printf("%c",x)
#define PLL(x) printf("%lld",x)
#define PLF(x) printf("%lf",x)
#define PS(x) printf("%s",x)
#define P32() printf(" ")
#define P10() printf("\n")
#define lc(i) (i<<1)
#define rc(i) ((i<<1)+1)
#define iscan(n) scanf("%d",&n)
#define cscan(n) scanf("%c",&n)
#define llscan(n) scanf("%lld",&n)
#define lfscan(n) scanf("%lf",&n)
#define sscan(n) scanf("%s",n)
#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORD(i,a,b) for(int i=b-1;i>=a;--i)
#define REP(i,b) for(int i=0;i<b;++i)
#define REPD(i,b) for(int i=b-1;i>=0;--i)
#define MP(a,b) make_pair((a),(b))
#define PB(a) push_back(a)
#define FILL(a,b) memset(a,b,sizeof a)
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define ABS(a) ((a)<0?-(a):(a))
#define ALL(a) a.begin(),a.end()
#define SORT(a) sort(ALL(a))
#define TR(i,c) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

class DrawingPointsDivTwo {
	public:
		bool diff(pair<double, double> a, pair<double, double> b)
		{
			return ABS(a.first-b.first) < 0.0000001 && ABS(a.second-b.second) < 0.0000001;
		}

		bool equal(vector<pair<double, double> > p, vector<pair<double, double> > q)
		{
			if(p.size() != q.size())
			{
				return false;
			}

			REP(i,p.size())
			{
				if(!diff(p[i], q[i]))
				{
					return false;
				}
			}

			return true;
		}

		vector<pair<double, double> > f(vector<pair<double, double> > p)
		{
			vector<pair<double, double> > ret;
			printf("P: ");
			REP(i,p.size())
			{
				cout << "(" << p[i].first << "," << p[i].second << ") ";
			}
			cout << endl;

			REP(i,p.size())		
			{
				ret.PB(MP(p[i].first - 0.5, p[i].second - 0.5));
				ret.PB(MP(p[i].first + 0.5, p[i].second - 0.5));
				ret.PB(MP(p[i].first - 0.5, p[i].second + 0.5));
				ret.PB(MP(p[i].first + 0.5, p[i].second + 0.5));
			}

			SORT(ret);

			printf("RET: ");
			REP(i,p.size())
			{
				cout << "(" << ret[i].first << "," << ret[i].second << ") ";
			}
			cout << endl;

			vector<pair<double, double> > p_new;

			if(ret.size() == 0)
			{
				return p_new;
			}

			p_new.PB(ret[0]);
			FOR(i,1,ret.size())
			{
				if(diff(ret[i], ret[i-1]))
				{
					p_new.PB(ret[i]);
				}
			}

			printf("P_NEW: ");
			REP(i,p.size())
			{
				cout << "(" << p_new[i].first << "," << p_new[i].second << ") ";
			}
			cout << endl;

			return p_new;
		}

		int maxSteps(vector <string> points) {
			vector<pair<double, double> > p;
			REP(i,points.size())
			{
				REP(j,points[i].length())
				{
					if(points[i][j] == '*')
					{
						p.PB(MP((double)j,(double)i));
					}
				}
			}

			int steps = 0;
			printf("%d: ", steps);
			REP(i,p.size())
			{
				cout << "(" << p[i].first << "," << p[i].second << ") ";
			}
			cout << endl;
			do
			{
				vector<pair<double, double> > p_new = f(p);

				if(equal(p, p_new))
				{
					return steps;
				}

				++steps;
				p = p_new;

				printf("%d: ", steps);
				REP(i,p.size())
				{
					cout << "(" << p[i].first << "," << p[i].second << ") ";
				}
				cout << endl;

				if(steps == 100000)
				{
					return -1;
				}
			}
			while(true);
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DrawingPointsDivTwo *obj;
	int answer;
	obj = new DrawingPointsDivTwo();
	clock_t startTime = clock();
	answer = obj->maxSteps(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
		// ----- test 0 -----
		string t0[] = {"*..*"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"...",".*."};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = -1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"*.*"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 0;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = {"..*.","*...","...*"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = {"....................","..........*.........","....................",".........*..........","....................","....................","....................","....................","....................","....................","....................","....................",".*..................","....................","*.............**....","....................","....................","................*...","....................","...................."};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 11;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

